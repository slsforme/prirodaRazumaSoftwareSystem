services:
  frontend:
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    networks:
      - web-network
    depends_on:
      - backend
    restart: always

  backend:
    build:
      context: ./backend/
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_BACKEND_URL=redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/0
      - REDIS_URL=redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - web-network
    restart: always
    volumes:
      - ${DATA_DIR}/${BACKEND_DIR}/logs:/app/logs
      - ${DATA_DIR}/${BACKEND_DIR}/backups:/backups
      - ${DATA_DIR}/${BACKEND_DIR}/uploads:/app/uploads  

  postgres:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - web-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  pgadmin:
    image: dpage/pgadmin4:8.11
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    networks:
      - web-network
    restart: always

  redis:
  
    image: redis:7-alpine
    volumes: 
      - ${DATA_DIR}/redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - web-network
    restart: always

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - web-network
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    
volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
  backups:
  uploads:
  logs:

networks:
  web-network:
    driver: bridge